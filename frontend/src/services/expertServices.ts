import axios, { AxiosResponse } from 'axios';
import api from "../utils/AxiosHelper";

interface Reply {
  expertId : string;
  expertName : string;
  content : string;
  createdAt : string;
}
interface Comment {
  id: string,
  websiteId: string,
  patternId: string,
  expertId: string,
  expertName: string,
  content: string,
  createdAt: string,
  replies: Reply[]; 
}

interface verification {
  expertId: string;
  expertVerificationPhase: string
}
interface Pattern {
    comments : Comment[];
    createdAt : string;
    createdByExpertId : string;
    description : string;
    detectedUrl : string;
    expertName: string;
    expertVerifications : verification[];
    id : string;
    isAutoGenerated : boolean;
    patternType: string;
    patternPhase: string;
    websiteId : string;
}

interface ServiceResponse {
  status : number;
  patterns: Pattern[];
}

const baseUrl : String = "http://localhost:8080"

const signIn = async (email: String, password : String, role: String) => {
  const config = {
    headers: {
      'Authorization': 'Bearer ACCESS_TOKEN',
      'ngrok-skip-browser-warning': 'any',
    },
  };
  const body = {
    email : email,
    password : password,
    role : role
  }

  try {
    const response = await axios.post(
      `${baseUrl}/user/signin`,
      body,
      config
    );
    return response.data.accessToken;
  } catch (error) {
    console.error('Error fetching patterns', error);
    throw error; 
  }
};

const getWebsites = async(id:String, authToken : String) => {
  const config = {
    headers: {
      'Authorization': `${authToken}`
    },
  };
  try {
    const response = await api.get(
      `${baseUrl}/website?userId=${id}`,
      config
    );
    return response.data
  } catch (error) {
    console.log(error);
  }
}

const getPatternsData = async (websiteId: string, token: string): Promise<ServiceResponse> => {
  const config = {
    headers: {
      'Authorization': `${token}`,
    },
  };

  try {
    const response: AxiosResponse<ServiceResponse> = await api.get<ServiceResponse>(
      `${baseUrl}/website/${websiteId}/pattern`,
      config
    );
    return response.data;
  } catch (error) {
    console.error('Error fetching patterns', error);
    throw error; 
  }
};

const getSpecificPattern = async (id: String, websiteId: String, token: string): Promise<Pattern> => {
  const config = {
    headers: {
      'Authorization': `${token}`,
    },
  };
  try {
    const response: AxiosResponse<Pattern> = await api.get<Pattern>(
      `${baseUrl}/website/${websiteId}/pattern/${id}`,
      config
    );
    return response.data;
  } catch (error) {
    console.error('Error fetching pattern details', error);
    throw error; 
  }
};

const CommentPost = async(patternId : String, websiteId : String, expertId : String, commentText : String, token : string) => {
  const config = {
    headers: {
      'Authorization': `${token}`,
    },
  };
  const body = {
    expertId : expertId,
    content : commentText
  }
  const response: AxiosResponse<Pattern> = await api.post<Pattern>(
    `${baseUrl}/website/${websiteId}/pattern/${patternId}/comment`,
    body,
    config
  );
  return response.status;
}

const replyPost = async(commentId : String, websiteId : String, patternId : String, expertId : String, replyText : String, token : string) => {
  const config = {
    headers: {
      'Authorization': `${token}`,
    },
  };
  const body = {
    expertId : expertId,
    content : replyText
  }
  const response: AxiosResponse<Pattern> = await api.post<Pattern>(
    `${baseUrl}/website/${websiteId}/pattern/${patternId}/comment/${commentId}/reply`,
    body,
    config
  );
  return response.status
  
}

const patternPost = async(websiteId : string, expertId : string, patternType : string, description : string, detectedUrl : string, token : string) =>{
  const config = {                 
    headers : {
        'Authorization':`${token}`,
        'ngrok-skip-browser-warning': 'any'
    }
  }
  const body = {
    createdByExpertId : expertId,
    patternType : patternType,
    description : description,
    detectedUrl : detectedUrl
  }
  const response: AxiosResponse<Pattern> = await api.post<Pattern>(
    `${baseUrl}/website/${websiteId}/pattern`,
    body,
    config
  );
  return response.status
}

function stringToColor(string: string) {
  let hash = 0;
  let i;
  for (i = 0; i < string.length; i += 1) {
    hash = string.charCodeAt(i) + ((hash << 5) - hash);
  }
  let color = '#';
  for (i = 0; i < 3; i += 1) {
    const value = (hash >> (i * 8)) & 0xff;
    color += `00${value.toString(16)}`.slice(-2);
  }
  return color;
}
function stringAvatar(name: string) {
  return {
    sx: {
      bgcolor: stringToColor(name),
    },
    children: `${name.split(' ')[0][0]}${name.split(' ')[1][0]}`,
  };
}

export { getPatternsData, getSpecificPattern, CommentPost, replyPost, signIn, getWebsites, patternPost, stringAvatar  };