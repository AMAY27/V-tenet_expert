import React, { useEffect, useState } from 'react'
import { useExpertContext } from '../../context/ExpertContext'
import { getPatternsData } from '../../services/expertServices';
import Navbar from '../../components/expert/Navbar';
import PatternCard from '../../components/expert/PatternCard';


const WebsiteDashboard = () => {
    const { websiteId, setWebsiteId } = useExpertContext();
    const { websiteName, setWebsiteName } = useExpertContext();
    const [patterns, setPatterns] = useState<any[]>([]);
    const experId = localStorage.getItem("userId");
    const token = localStorage.getItem("authToken");

    const getPatterns = async () => {
        setPatterns([]);
        let data : any = [];
        if(websiteId && token){
            data = await getPatternsData(websiteId, token);
            setPatterns(data);
            console.log(data);
        }
    }

    useEffect(()=>{
        getPatterns();
    },[])
  return (
    <>
        <Navbar/>
        <>
        <div className='flex justify-between py-4 px-24'>
          <div>
            <h2 className='text-3xl font-bold text-blue-500'>{websiteName}</h2>
          </div>
        </div>
        <div className='mx-10 shadow-xl roundex-2xl bg-white'>
          <div className='flex justify-between items-center pt-4 px-52'>
            <div className='flex justify-between items-center'>
              <div className='flex'>
                <div className='mx-3'>
                  <label htmlFor="patternlink" className='mb-2 block text-md font-medium'>Created By</label>
                  <select id="orient" className='p-2 bg-transparent border-2 rounded-md w-40'>
                    <option value="Select">Select</option>
                    <option>Amay Rajvaidya</option>
                    <option>Ajay Dhami</option>
                    <option>Drashti Patel</option>
                  </select>
                </div>
                <div className='mx-3'>
                  <label htmlFor="patternlink" className='mb-2 block text-md font-medium'>Pattern Type</label>
                  <select id="orient" className='p-2 bg-transparent border-2 rounded-md w-40'>
                    <option value="Select">Select</option>
                    <option>Misdirection</option>
                    <option>Fake Scarcity</option>
                    <option>Fake Urgency</option>
                    <option>Fake Social proof</option>
                  </select>
                </div>
                <div className='mx-3'>
                  <label htmlFor="patternlink" className='mb-2 block text-md font-medium'>Status</label>
                  <select id="orient" className='p-2 bg-transparent border-2 rounded-md w-40'>
                    <option value="Select">Select</option>
                    <option value="completed">Completed</option>
                    <option value="progress">In Progress</option>
                    <option value="verification">Verification</option>
                  </select>
                </div>
              </div>  
            </div>
            <div className=''>
                <button  className=' px-8 py-2 rounded-md mx-5 bg-gradient-to-r from-cyan-500 to-blue-500 text-white'>Add a Pattern</button>
                <button className=' px-8 py-2 rounded-md bg-gradient-to-r from-cyan-500 to-blue-500 text-white'>Chat</button>
              </div>
          </div>
          <div className='px-52'>
          {patterns.map((pattern,index)=>(
            pattern.patternPhase === "InProgress" ? 
              (<PatternCard patternKey={pattern.id} isAutoGenerated = {pattern.isAutoGenerated} websiteId={pattern.websiteId} patternId = {pattern.id} loggedInExpert = {experId ? experId : ""} pattern_date={pattern.createdAt} pattern_type={pattern.patternType} expertName={pattern.expertName} color={"#F9C32F"} text={"In Progress"} hoverText = {"Awaiting Verification from experts"} />)
              : pattern.patternPhase === "Verified" && pattern.isPatternExists === true ? 
              (<PatternCard patternKey={pattern.id} isAutoGenerated = {pattern.isAutoGenerated} websiteId={pattern.websiteId} patternId = {pattern.id} loggedInExpert = {experId ? experId : ""} pattern_date={pattern.createdAt} pattern_type={pattern.patternType} expertName={pattern.expertName} color={"#E6321D"} text={"Verified"} hoverText = {"Verified but dark pattern exists"} />)
              : pattern.patternPhase === "Verified" && pattern.isPatternExists === false ? 
              (<PatternCard patternKey={pattern.id} isAutoGenerated = {pattern.isAutoGenerated} websiteId={pattern.websiteId} patternId = {pattern.id} loggedInExpert = {experId ? experId : ""} pattern_date={pattern.createdAt} pattern_type={pattern.patternType} expertName={pattern.expertName} color={"#538D3F"} text={"Verified"} hoverText = {"Verified and dark pattern free"} />)
              : null
          ))}
          </div>
        </div>
        </>
    </>
  )
}

export default WebsiteDashboard